name: Firebase App Distribution

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  upload-apk:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Firebase CLI
        run: npm install -g firebase-tools

      - name: Fetch version from Firebase Cloud Storage
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          BUCKET_NAME="testo-ea214.appspot.com"
          VERSION_FILE="version.txt"
          # Fetch the version.txt file from Firebase Cloud Storage using gsutil
          gsutil ls gs://$BUCKET_NAME
          gsutil cp gs://$BUCKET_NAME/$VERSION_FILE .

          # Read the version number from the file
          CURRENT_VERSION=$(cat $VERSION_FILE)
          echo "Current Version: $CURRENT_VERSION"

          # Split version number into major, minor, patch
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Increment version (patch version in this case)
          PATCH=$((PATCH + 1))
          NEW_VERSION_NUMBER="${MAJOR}.${MINOR}.${PATCH}"
          echo "New Version: $NEW_VERSION_NUMBER"
          # Export the new version to be used in subsequent steps
          echo "NEW_VERSION_NUMBER=$NEW_VERSION_NUMBER" >> $GITHUB_ENV

      - name: Dummy Build
        run: echo "Building"

      - name: Fetch all commits
        run: git fetch --unshallow

      - name: Generate Release Notes
        run: |
          # Set environment vars
          SHA_PULLS_API_URL="https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/pulls"
          currentShaResponse=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$SHA_PULLS_API_URL")
          CURRENT_RUN_DATE=$(echo "$currentShaResponse" | jq -r 'map(select(.merged_at != null)) | .[0].merged_at')
          API_URL="https://api.github.com/repos/${{ github.repository }}/actions/workflows/firebaseDistribute.yml/runs?status=completed&branch=main"
          PREV_RUN_SHA=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$API_URL" | jq -r '.workflow_runs[] | select(.conclusion == "success") | .head_sha' | head -n 1)
          PREV_RUN_DATE=$(git show -s --format=%ci $PREV_RUN_SHA)
          if [ -z "$PREV_RUN_SHA" ]; then
            echo "No previous successful run found. Skipping release notes generation."
            exit 0
          fi
          # Generate release notes from commits
          RELEASE_NOTES_FILE=releasenotes.txt
          echo "Generated by GitHub Action run: ${{ github.run_id }}" > $RELEASE_NOTES_FILE
          git log --pretty=format:"- %s" $PREV_RUN_SHA..${{ github.sha }} >> $RELEASE_NOTES_FILE
          echo "Release notes generated: $(cat $RELEASE_NOTES_FILE)"

      - name: Upload APK to Firebase App Distribution
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          firebase appdistribution:distribute bitbar-sample-app.apk \
            --app ${{ secrets.FIREBASE_APP_ID }} \
            --groups "testers" \
            --release-notes-file releasenotes.txt \
            --debug

      - name: Update version.txt in Firebase Cloud Storage
        if: success()  # to ensure this step only runs if the previous steps succeeded
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          BUCKET_NAME="testo-ea214.appspot.com"
          VERSION_FILE="version.txt"
          # Update the version.txt file with the new version number
          echo "$NEW_VERSION_NUMBER" > $VERSION_FILE
          # Upload the updated version.txt file back to Firebase Cloud Storage using gsutil
          gsutil cp $VERSION_FILE gs://$BUCKET_NAME/$VERSION_FILE
